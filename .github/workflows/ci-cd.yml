name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly security scan

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, python
        queries: +security-and-quality
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency Management
  dependency-check:
    name: üì¶ Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
        fi
    
    - name: Run dependency audit
      run: |
        if [ -f package.json ]; then
          npm audit --audit-level moderate
        fi
    
    - name: Check for outdated packages
      run: |
        if [ -f package.json ]; then
          npm outdated || true
        fi

  # Workflow Validation
  validate-workflows:
    name: ‚úÖ Validate Workflows
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install validation dependencies
      run: |
        npm install -g ajv ajv-formats
        npm install --no-save lodash
    
    - name: Validate JSON syntax
      run: |
        echo "üîç Validating workflow JSON syntax..."
        for file in workflows/*.json; do
          if [ -f "$file" ]; then
            echo "Validating $file"
            node -e "JSON.parse(require('fs').readFileSync('$file', 'utf8'))" || exit 1
          fi
        done
    
    - name: Check workflow structure
      run: |
        if [ -f scripts/validate-workflows.js ]; then
          node scripts/validate-workflows.js
        fi
    
    - name: Scan for exposed credentials
      run: |
        echo "üîç Scanning for exposed credentials..."
        if grep -r "sk-[a-zA-Z0-9]\{48\}" workflows/ || \
           grep -r "ya29\.[a-zA-Z0-9_-]\{68\}" workflows/ || \
           grep -r "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}" workflows/; then
          echo "‚ùå Found exposed credentials!"
          exit 1
        fi
        echo "‚úÖ No exposed credentials found"

  # Docker Build and Test
  docker-build:
    name: üê≥ Docker Build & Test
    runs-on: ubuntu-latest
    needs: [security-scan, validate-workflows]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Docker images
      run: |
        echo "üî® Building Docker containers..."
        cp .env.example .env
        docker-compose build
    
    - name: Test container startup
      run: |
        echo "üß™ Testing container startup..."
        docker-compose up -d
        
        # Wait for services to be ready
        echo "‚è≥ Waiting for services..."
        sleep 60
        
        # Check service health
        docker-compose ps
        
        # Test n8n health endpoint
        curl -f http://localhost:5678/healthz || exit 1
        
        echo "‚úÖ All containers started successfully"
    
    - name: Run integration tests
      run: |
        echo "üß™ Running integration tests..."
        # Add your integration tests here
        docker-compose exec -T n8n n8n --version
    
    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  # Performance Testing
  performance-test:
    name: ‚ö° Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup performance testing
      run: |
        echo "‚ö° Setting up performance tests..."
        # Add your performance testing setup here
    
    - name: Run load tests
      run: |
        echo "üî• Running load tests..."
        # Add load testing commands here

  # Documentation Build
  docs-build:
    name: üìö Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Build documentation
      run: |
        echo "üìñ Building documentation..."
        # Add documentation build steps here
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        cname: n8n-job-automation.example.com

  # Notification
  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: [security-scan, validate-workflows, docker-build]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.security-scan.result == 'success' && needs.validate-workflows.result == 'success' && needs.docker-build.result == 'success'
      run: |
        echo "‚úÖ All checks passed! Ready for deployment."
    
    - name: Notify on failure
      if: needs.security-scan.result == 'failure' || needs.validate-workflows.result == 'failure' || needs.docker-build.result == 'failure'
      run: |
        echo "‚ùå Some checks failed. Please review the logs."
        exit 1